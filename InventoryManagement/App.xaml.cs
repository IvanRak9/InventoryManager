using Microsoft.Extensions.DependencyInjection;
using InventoryManagement.Data;
using InventoryManagement.Interfaces;
using InventoryManagement.Repositories;
using Microsoft.EntityFrameworkCore;
using System.Windows;

namespace InventoryManagement
{
  public partial class App : Application
  {
    public static IServiceProvider? ServiceProvider { get; private set; }

    protected override void OnStartup(StartupEventArgs e)
    {
      var services = new ServiceCollection();

      // üîå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      services.AddDbContext<InventoryContext>(options =>
          options.UseSqlServer("Server=(localdb)\\MSSQLLocalDB;Database=InventoryDB;Trusted_Connection=True;TrustServerCertificate=True;"));

      // üß± –ë–∞–∑–æ–≤–∏–π generic —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
      services.AddScoped(typeof(IRepository<>), typeof(Repository<>));

      // üì¶ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
      services.AddScoped<IProductRepository, ProductRepository>();
      services.AddScoped<ICategoryRepository, CategoryRepository>();
      services.AddScoped<ISupplierRepository, SupplierRepository>();

      // ü™ü –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è DI)
      services.AddTransient<MainWindow>();

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      ServiceProvider = services.BuildServiceProvider();

      // üîÅ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —á–µ—Ä–µ–∑ DI
      var mainWindow = ServiceProvider.GetRequiredService<MainWindow>();
      mainWindow.Show();

      base.OnStartup(e);
    }
  }
}
